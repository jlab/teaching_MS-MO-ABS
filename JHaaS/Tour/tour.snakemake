#rule ex_unix_BioinfFileformats:
#  input:
#    gtf="{targetdir}/Generated/Unix/hg19.ncbiRefSeq.gtf.gz",
#    fasta="{targetdir}/Generated/Unix/chr1.fa.gz"
#  output:
#    bed="{targetdir}/Generated/Unix/hg19.ncbiRefSeq.chr1.bed.gz",
#    mapping="{targetdir}/Generated/Unix/hg19.ncbiRefSeq.chr1.mapping.txt.gz",
#    fasta="{targetdir}/Generated/Unix/hg19.ncbiRefSeq.chr1.fasta.gz"
#  log:
#    bed="{targetdir}/Logs/Unix/hg19chr1.bed.log",
#    mapping="{targetdir}/Logs/Unix/hg19chr1.mapping.log",
#    fasta="{targetdir}/Logs/Unix/hg19chr1.fasta.log",
#  benchmark:
#    "{targetdir}/Benchmarks/Unix/hg19chr1.benchmark"
#  conda:
#    "env_unix.yaml"
#  threads:
#    1
#  shell:
#    'zcat {input.gtf} | grep -P "^chr1\t" | gtf2bed | gzip -c > {output.bed} 2> {log.bed}'
#    ' && zcat {output.bed} | awk \'BEGIN{{FS="\t"}}{{if ($8~/transcript/)print $10}}\' | awk \'NR==1 {{print "#name","name2"}}BEGIN{{FS="\\""}}{{print $4"\t"$2}}\' | gzip -c > {output.mapping} 2> {log.mapping}'
#    ' && pwd=`pwd` 2> {log.fasta}'
#    ' && tmp=`mktemp -d` 2>> {log.fasta}'
#    ' && zcat {input.fasta} > $tmp/fasta 2>> {log.fasta}'
#    ' && zcat {output.bed} | grep -P "\ttranscript\t" 2>> {log.fasta} > $tmp/bed'
#    ' && cd $tmp 2>> $pwd/{log.fasta}'
#    ' && bedtools getfasta -fi fasta -bed bed -name > tmp.faa 2>> $pwd/{log.fasta}'
#    ' && gzip tmp.faa -c > $pwd/{output.fasta} 2>> $pwd/{log.fasta}'
#    ' && cd $pwd 2>> $pwd/{log.fasta}'
#    ' && rm -rf $tmp 2>> $pwd/{log.fasta}'

files = ['pop_bioinf_software.xlsx', 'conda.dls.cache', 'meiers.txt',
         'meiers.fasta', 'meiers.msa', 'meierhistory.txt',
         'NC_000913.3_Escherichia_coli_K-12.fasta.gz', 
         'NC_002695.2_Escherichia_coli_O157.fasta.gz',
         'NC_003210.1_Listeria_monocytogenes_EGD-e.fasta.gz',
         'NC_004337.2_Shigella_flexneri_2a_301.fasta.gz',
         'ass_reads_50-30.fq.gz', 'ass_reads_50-60.fq.gz',
         'sarscov2_spike_pcr.fasta', 'trna.fasta', 'hsa-mir-145.fasta',
         'mrna.fasta', 'hg38_chr5_rnahit.fasta']
rule files_tour:
  input:
    ["../data/%s" % f for f in files]
  output:
    ["%s/Generated/Tour/%s" % (relpath(config['dir_dist']), f) for f in files]
  log:
    "%s/Logs/Tour/files_tour.log" % relpath(config['dir_dist'])
  shell:
    'srcs=({input}) 2> {log}'
    ' && trgs=({output}) 2>> {log}'
    ' && for i in "${{!srcs[@]}}"; do '
    ' cp -v "${{srcs[i]}}" "${{trgs[i]}}" 2>> {log};'
    ' done'

rule file_notebook:
  input:
    nb='../bioinf_software.ipynb',
    data='../data/conda.dls.cache'
  output:
     nb="%s/Generated/Tour/bioinf_software.ipynb" % relpath(config['dir_dist']),
     data="%s/Generated/Tour/conda.dls.cache" % relpath(config['dir_dist'])
  log:
    "%s/Logs/Tour/files_tour_notebook.log" % relpath(config['dir_dist'])
  shell:
    'cp {input.nb} {output.nb} 2> {log}'
    ' && cp {input.data} {output.data} 2>> {log}'
    ' && sed -i -e "s#data/pop_bioinf_software.xlsx#/Data/Tour/pop_bioinf_software.xlsx#" {output.nb} 2>> {log}'
    ' && sed -i -e "s#/homes/sjanssen/miniconda3/envs/msmoabs/bin/condastats#/opt/conda/envs/bioinftour/bin/condastats#" {output.nb} 2>> {log}'
    ' && sed -i -e \'s#fp_cache = \\\\"conda.dls.cache\\\\"#fp_cache = \\\\"/Data/Tour/conda.dls.cache\\\\"#\' {output.nb} 2>> {log}'

rule exec_tests_tour:
  input:
    rules.build_image.output,
    rules.file_notebook.output,
    script='Tour/tour.tests.make',
    docker='Tour/tour.tests.dockerfile'
  output:
    "%s/Testres/tour.txt" % relpath(config['dir_dist'])
  log:
    "%s/Logs/container_tests/tour.log" % relpath(config['dir_dist'])
  benchmark:
    "%s/Benchmarks/container_tests/tour.benchmark" % relpath(config['dir_dist'])
  params:
    context=join(relpath(config['dir_dist']), 'podman_tour'),
    proxy=lambda wildcards: config['proxy'],
    mount=join(config['dir_dist'], 'Generated'),
    tag=config['podman']['tagprefix']
  shell:
    'mkdir -p {params.context} 2> {log}'
    ' && cp {input.script} {params.context}/ 2>> {log}'
    ' && podman build {params.context}/ -f {input.docker} -t {params.tag}_tests_tour --format=docker --build-arg http_proxy="{params.proxy}" --build-arg https_proxy="{params.proxy}" --build-arg ftp_proxy="{params.proxy}" 2>> {log} > {output}'
    ' && podman run -v {params.mount}:/Data/ -e http_proxy="{params.proxy}" -e https_proxy="{params.proxy}" -e ftp_proxy="{params.proxy}" -t {params.tag}_tests_tour /bin/bash -c "source /opt/conda/etc/profile.d/conda.sh; conda activate bioinftour; make" 2>> {log} >> {output}'
    ' && echo "passed" >> {output} 2>> {log}'

rule tour:
  input:
    rules.files_tour.output,
    #'%s/Generated/Unix/hg19.ncbiRefSeq.chr1.bed.gz' % relpath(config['dir_dist']),
    rules.exec_tests_tour.output
