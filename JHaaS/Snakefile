from os.path import join, abspath, relpath

configfile: 'settings.yaml'

def get_proxy_calls():
  if 'proxy' in config.keys():
    return ('export http_proxy="{params.proxy}" 2> {log}'
            ' && export https_proxy="{params.proxy}" 2>> {log}'
            ' && export ftp_proxy="{params.proxy}" 2>> {log}')
  else:
    return ""
PROXYCALLS=get_proxy_calls()
#print(config['downloads'])

include: "Unix/unix.snakemake"

rule all:
  input:
    sra=["%s/%s/SRA/%s" % (relpath(config['dir_dist']), config['dir_%s' % config['downloads']['SRA'][item]['target_dir']], item) for item in config['downloads']['SRA'].keys()],
    sraPE=["%s/%s/SRA_PE/%s_1.fastq.bz2" % (relpath(config['dir_dist']), config['dir_%s' % config['downloads']['SRA_PE'][item]['target_dir']], item) for item in config['downloads']['SRA_PE'].keys()],
    wget=["%s/%s/wget/%s" % (relpath(config['dir_dist']), config['dir_%s' % config['downloads']['wget'][item]['target_dir']], item) for item in config['downloads']['wget'].keys()]
  #~ output:
    #~ all=["%s/%s/%s" % (relpath(config['dir_dist']), config['dir_refdata'], item) for item in config['downloads']['SRA'].keys()] + 
        #~ ["%s/%s/%s" % (relpath(config['dir_dist']), config['dir_refdata'], item) for item in config['downloads']['wget'].keys()]
  #~ log:
    #~ "%s/%s/%s/download.log" % (relpath(config['dir_dist']), config['dir_logs'], config['dir_refdata'])
  #~ benchmark:
    #~ "%s/%s/%s/download.benchmark" % (relpath(config['dir_dist']), config['dir_benchmarks'], config['dir_refdata'])
  #~ params:
    #~ outdir=join(relpath(config['dir_dist']), config['dir_refdata'])
  #~ shell:
    #~ 'mv {input.sra} {input.wget} {params.outdir} -v 2> {log}'

rule download_sra:
  output:
    "%s/{targetdir}/SRA/{file}" % (relpath(config['dir_dist']))
  log:
    "%s/{targetdir}/%s/SRA/{file}.log" % (relpath(config['dir_dist']), config['dir_logs'])
  benchmark:
    "%s/{targetdir}/%s/SRA/{file}.benchmark" % (relpath(config['dir_dist']), config['dir_benchmarks'])
  resources:
    ntasks="2",
    mem_mb="2000"
  conda:
    "Envs/env_download.yaml"
  params:
    url=lambda wildcards: config['downloads']['SRA'][wildcards['file']]['url'],
    accession=lambda wildcards: config['downloads']['SRA'][wildcards['file']]['url'].split('/')[-1],
    md5=lambda wildcards: config['downloads']['SRA'][wildcards['file']]['md5'],
    proxy=lambda wildcards: config['proxy'],
    outdir=lambda wildcards: relpath(join(config['dir_dist'], wildcards['targetdir']))
  shell:
    'export http_proxy="{params.proxy}" 2> {log}'
    ' && export https_proxy="{params.proxy}" 2>> {log}'
    ' && export ftp_proxy="{params.proxy}" 2>> {log}'
    ' && mkdir -p `dirname {output}` 2>> {log}'
    ' && fasterq-dump -f {params.url} -F fastq --skip-technical -e {resources.ntasks} -p -O {params.outdir} 2>> {log}'
    ' && md5sum -c <<<"{params.md5} {params.outdir}/{params.accession}.fastq" 2>> {log} 1>&2'
    ' && gzip {params.outdir}/{params.accession}.fastq -9 -c > {output} 2>> {log}'
    ' && rm -f {params.outdir}/{params.accession}.fastq 2>> {log}'

rule download_sra_PE:
  output:
    #r1=lambda wildcards: "%s/%s/SRA_PE/{file}_1.fastq.bz2" % (relpath(config['dir_dist']), config['dir_%s' % config['downloads']['SRA_PE'][wildcards['file']]['target_dir']])
    r1="%s/{targetdir}/SRA_PE/{file}_1.fastq.bz2" % (relpath(config['dir_dist'])),
    r2="%s/{targetdir}/SRA_PE/{file}_2.fastq.bz2" % (relpath(config['dir_dist']))
  log:
    "%s/%s/{targetdir}/SRA_PE/{file}.log" % (relpath(config['dir_dist']), config['dir_logs'])
  benchmark:
    "%s/%s/{targetdir}/SRA_PE/{file}.benchmark" % (relpath(config['dir_dist']), config['dir_benchmarks'])
  resources:
    ntasks="2",
    mem_mb="2000"
  conda:
    "Envs/env_download.yaml"
  params:
    url=lambda wildcards: config['downloads']['SRA_PE'][wildcards['file']]['url'],
    accession=lambda wildcards: config['downloads']['SRA_PE'][wildcards['file']]['url'].split('/')[-1],
    md5r1=lambda wildcards: config['downloads']['SRA_PE'][wildcards['file']]['md5_r1'],
    md5r2=lambda wildcards: config['downloads']['SRA_PE'][wildcards['file']]['md5_r2'],
    proxy=lambda wildcards: config['proxy'],
    outdir=lambda wildcards: relpath(join(config['dir_dist'], wildcards['targetdir'], 'SRA_PE'))
  shell:
    'export http_proxy="{params.proxy}" 2> {log}'
    ' && export https_proxy="{params.proxy}" 2>> {log}'
    ' && export ftp_proxy="{params.proxy}" 2>> {log}'
    ' && mkdir -p `dirname {output}` 2>> {log}'
    ' && fasterq-dump -f {params.url} -F fastq --skip-technical -e {resources.ntasks} -p -O {params.outdir} 2>> {log}'
    ' && md5sum -c <<<"{params.md5r1} {params.outdir}/{params.accession}_1.fastq" 2>> {log} 1>&2'
    ' && md5sum -c <<<"{params.md5r2} {params.outdir}/{params.accession}_2.fastq" 2>> {log} 1>&2'
    ' && cat {params.outdir}/{params.accession}_1.fastq | bzip2 -k -9 -c > {output.r1} 2>> {log}'
    ' && cat {params.outdir}/{params.accession}_2.fastq | bzip2 -k -9 -c > {output.r2} 2>> {log}'

rule download_wget:
  output:
    "%s/{targetdir}/wget/{file}" % (relpath(config['dir_dist']))
  log:
    "%s/{targetdir}/%s/wget/{file}.log" % (relpath(config['dir_dist']), config['dir_logs'])
  benchmark:
    "%s/{targetdir}/%s/wget/{file}.benchmark" % (relpath(config['dir_dist']), config['dir_benchmarks'])
  threads:
    2
  params:
    url=lambda wildcards: config['downloads']['wget'][wildcards['file']]['url'],
    md5=lambda wildcards: config['downloads']['wget'][wildcards['file']]['md5'],
    proxy=lambda wildcards: config['proxy'],
    outdir=lambda wildcards: relpath(join(config['dir_dist'], wildcards['targetdir']))
  shell:
    'export http_proxy="{params.proxy}" 2> {log}'
    ' && export https_proxy="{params.proxy}" 2>> {log}'
    ' && export ftp_proxy="{params.proxy}" 2>> {log}'
    ' && wget "{params.url}" -O {output} 2>> {log}'
    ' && md5sum -c <<<"{params.md5} {output}" 2>> {log} 1>&2'



#wget https://hgdownload.soe.ucsc.edu/goldenPath/archive/hg19/ncbiRefSeq/105.20220307/hg19.105.20220307.ncbiRefSeq.gtf.gz
#gtf:
#  107463 Zeilen
#  44377 CDS
#  54036 exon
#   4529 start_codon
#   4521 stop_codon
#
#gtf new:
#  192259 Zeilen
#     6519 3UTR
#  12745 5UTR
#  65952 CDS
#  85502 exon
#   6155 start_codon
#   6151 stop_codon
#   9235 transcript
#


#zcat no_backup/biodata/wget/hg19.ncbiRefSeq.gtf.gz | grep -P "^chr1	" | gtf2bed | gzip -c > no_backup/biodata/hg19.ncbiRefSeq.chr1.bed.gz 2> no_backup/Logs/biodata/hg19chr1.log && 
#zcat no_backup/biodata/hg19.ncbiRefSeq.chr1.bed.gz | awk 'BEGIN{FS="	"}{if ($8~/transcript/)print $10}' | awk 'NR==1 {print "#name","name2"}BEGIN{FS='"'}{print $4"	"$2}' | gzip -c > no_backup/biodata/hg19.ncbiRefSeq.chr1.mapping.txt.gz 2>> no_backup/Logs/biodata/hg19chr1.log && 
#tmp=`mktemp` 2>> no_backup/Logs/biodata/hg19chr1.log && cd $$tmp 2>> no_backup/Logs/biodata/hg19chr1.log && zcat no_backup/biodata/wget/chr1.fa.gz > fasta 2>> no_backup/Logs/biodata/hg19chr1.log && zcat no_backup/biodata/hg19.ncbiRefSeq.chr1.bed.gz | grep -P "	transcript	" > bed 2>> no_backup/Logs/biodata/hg19chr1.log && bedtools getfasta -fi fasta -bed bed -name > tmp.faa2>> no_backup/Logs/biodata/hg19chr1.log && gzip tmp.faa > no_backup/biodata/hg19.ncbiRefSeq.chr1.fasta.gz 2>> no_backup/Logs/biodata/hg19chr1.log && cd - 2>> no_backup/Logs/biodata/hg19chr1.log && rm -rf $$tmp 2>> no_backup/Logs/biodata/hg19chr1.log
