from os.path import join, abspath, relpath, dirname

configfile: 'settings.yaml'
localrules: build_image, exec_tests_unix, exec_tests_tour, exec_tests_ngs, exec_tests_python, exec_tests_rnaseq, file_notebook, rnaseq_prepare_dge, exec_tests_chipseq

rule build_image:
  input:
    env_tour='Tour/env_tour.yaml',
    env_rnaseq='RNAseq/env_rnaseq.yaml',
    env_dge='RNAseq/env_dge.yaml',
    env_ngs='NGS/env_ngs.yaml',
    env_chipseq='ChIPseq/env_chipseq.yaml',
    docker='jhaas.dockerfile'
  output:
    "%s/jhaas_image.txt" % relpath(config['dir_dist'])
  log:
    "%s/Logs/jhaas_image.log" % relpath(config['dir_dist'])
  benchmark:
    "%s/Benchmarks/jhaas_image.benchmark" % relpath(config['dir_dist'])
  params:
    proxy=lambda wildcards: config['proxy'],
    mount=join(config['dir_dist'], 'Generated'),
    tag=config['podman']['tagprefix']
  shell:
    'tmp=`mktemp -d` 2> {log}'
    ' && cp {input.env_tour} {input.env_rnaseq} {input.env_dge} {input.env_chipseq} {input.env_ngs} {input.docker} $tmp 2>> {log}'
    ' && podman build $tmp -f $tmp/{input.docker} -t {params.tag} --format=docker --build-arg http_proxy="{params.proxy}" --build-arg https_proxy="{params.proxy}" --build-arg ftp_proxy="{params.proxy}" 2>> {log} > {output}'
    ' && rm -rf $tmp 2>> {log}'
    ' && echo "image built" > {output} 2>> {log}'

rule download_wget:
  output:
    "{targetdir}/Generated/{topic}/{file}"
  log:
    "{targetdir}/Logs/{topic}/{file}.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/{file}.benchmark"
  wildcard_constraints:
    file='|'.join([name for name, item in config['downloads'].items() if 'type' in item.keys() and item['type'] == 'wget'])
  threads:
    2
  params:
    url=lambda wildcards: config['downloads'][wildcards['file']]['url'],
    md5=lambda wildcards: config['downloads'][wildcards['file']]['md5'],
    proxy=lambda wildcards: config['proxy'],
    outdir=lambda wildcards: relpath(join(wildcards['targetdir'], 'Generated', wildcards['topic']))
  shell:
    'export http_proxy="{params.proxy}" 2> {log}'
    ' && export https_proxy="{params.proxy}" 2>> {log}'
    ' && export ftp_proxy="{params.proxy}" 2>> {log}'
    ' && wget "{params.url}" -O {output} 2>> {log}'
    ' && md5sum -c <<<"{params.md5} {output}" 2>> {log} 1>&2'

rule download_sra_PE:
  output:
    r1="{targetdir}/Generated/{topic}/{file}_1.fastq.bz2",
    r2="{targetdir}/Generated/{topic}/{file}_2.fastq.bz2",
  log:
    "{targetdir}/Logs/{topic}/{file}.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/{file}.benchmark"
  wildcard_constraints:
    file='|'.join([name for name, item in config['downloads'].items() if 'type' in item.keys() and item['type'] == 'SRA_PE'])
  resources:
    ntasks="2",
    mem_mb="4000"
  conda:
    "NGS/env_ngs.yaml"
  params:
    url=lambda wildcards: config['downloads'][wildcards['file']]['url'],
    md5r1=lambda wildcards: config['downloads'][wildcards['file']]['md5_r1'],
    md5r2=lambda wildcards: config['downloads'][wildcards['file']]['md5_r2'],
    proxy=lambda wildcards: config['proxy'],
  shell:
    'export http_proxy="{params.proxy}" 2> {log}'
    ' && export https_proxy="{params.proxy}" 2>> {log}'
    ' && export ftp_proxy="{params.proxy}" 2>> {log}'
    ' && tmp=`mktemp -d` 2>> {log}'
    ' && fasterq-dump -f {params.url} -F fastq --skip-technical -e {resources.ntasks} -p -O $tmp -t /var/scratch/ 2>> {log}'
    ' && md5sum -c <<<"{params.md5r1} `readlink -f $tmp/*_1.fastq`" 2>> {log} 1>&2'
    ' && md5sum -c <<<"{params.md5r2} `readlink -f $tmp/*_2.fastq`" 2>> {log} 1>&2'
    ' && mkdir -p `dirname {output.r1}` 2>> {log}'
    ' && cat $tmp/*_1.fastq | bzip2 -k -9 -c > {output.r1} 2>> {log}'
    ' && cat $tmp/*_2.fastq | bzip2 -k -9 -c > {output.r2} 2>> {log}'
    ' && rm -rf $tmp 2>> {log}'

rule download_sra_SE:
  output:
    "{targetdir}/Generated/{topic}/{file}"
  log:
    "{targetdir}/Logs/{topic}/{file}.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/{file}.benchmark"
  wildcard_constraints:
    file='|'.join([name for name, item in config['downloads'].items() if 'type' in item.keys() and item['type'] == 'SRA_SE'])
  resources:
    ntasks="2",
    mem_mb="4000"
  conda:
    "NGS/env_ngs.yaml"
  params:
    url=lambda wildcards: config['downloads'][wildcards['file']]['url'],
    md5=lambda wildcards: config['downloads'][wildcards['file']]['md5'],
    proxy=lambda wildcards: config['proxy'],
  shell:
    'export http_proxy="{params.proxy}" 2> {log}'
    ' && export https_proxy="{params.proxy}" 2>> {log}'
    ' && export ftp_proxy="{params.proxy}" 2>> {log}'
    ' && tmp=`mktemp -d` 2>> {log}'
    ' && fasterq-dump -f {params.url} -F fastq --skip-technical -e {resources.ntasks} -p -O $tmp -t /var/scratch/ 2>> {log}'
    ' && md5sum -c <<<"{params.md5} `readlink -f $tmp/*.fastq`" 2>> {log} 1>&2'
    ' && cat $tmp/*.fastq | gzip -k -9 -c > {output} 2>> {log}'
    ' && rm -rf $tmp 2>> {log}'



include: "Unix/unix.snakemake"
include: "Genomics/genomics.snakemake"
include: "Tour/tour.snakemake"
include: "NGS/ngs.snakemake"
include: "Python/python.snakemake"
include: "RNAseq/rnaseq.snakemake"
include: "ChIPseq/chipseq.snakemake"

rule all:
  input:
    rules.unix.input, 
    rules.genomics.input, 
    rules.tour.input, 
    rules.ngs.input, 
    rules.python.input, 
    rules.rnaseq.input, 
    rules.chipseq.input
