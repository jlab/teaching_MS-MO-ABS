samples = ["p65_ChIP-seq_TNF_1", "p65_ChIP-seq_TNF_2", "p65_ChIP-seq_Vehicle_1", "p65_ChIP-seq_Vehicle_2", "p65_Input_TNF", "p65_Input_Vehicle"]

rule chipseq_callpeak:
  input:
    fore="{targetdir}/Generated/{topic}/p65_ChIP-seq_{fore}_hisat2_unspliced.sorted.bam",
    back="{targetdir}/Generated/{topic}/p65_Input_{back}_hisat2_unspliced.sorted.bam"
  output:
    peaks="{targetdir}/Generated/{topic}/callpeak/p65_{fore}-vs-{back}_peaks.xls",
    ctrllambda="{targetdir}/Generated/{topic}/callpeak/p65_{fore}-vs-{back}_control_lambda.bdg",
    r="{targetdir}/Generated/{topic}/callpeak/p65_{fore}-vs-{back}_model.r",
    narrowPeak="{targetdir}/Generated/{topic}/callpeak/p65_{fore}-vs-{back}_peaks.narrowPeak",
    bed="{targetdir}/Generated/{topic}/callpeak/p65_{fore}-vs-{back}_summits.bed",
    bdg="{targetdir}/Generated/{topic}/callpeak/p65_{fore}-vs-{back}_treat_pileup.bdg",
  log:
    "{targetdir}/Logs/{topic}/callpeak/p65_{fore}-vs-{back}.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/callpeak/p65_{fore}-vs-{back}.benchmark"
  conda:
    "env_chipseq.yaml"
  threads:
    1
  shell:
    "macs2 callpeak -t {input.fore} -c {input.back} -n p65_{wildcards.fore}-vs-{wildcards.back} --outdir `dirname {output.peaks}` -f BAM -B -g hs 2> {log}"

rule chipseq_multiqc_report:
  input:
    ["{targetdir}/Generated/ChIPseq/%s_trimmed/" % sample for sample in samples],
  output:
    directory("{targetdir}/Generated/{topic}/multiQC_report")
  log:
    "{targetdir}/Logs/{topic}/multiqc_report.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/multiqc_report.benchmark"
  conda:
    "../RNAseq/env_rnaseq.yaml"
  threads:
    1
  shell:
    "mkdir -p {output} 2> {log}"
    " && multiqc {input} --outdir {output} 2>> {log}"

rule chipseq_plot_model:
  input:
    script="{targetdir}/Generated/{topic}/callpeak/p65_{fore}-vs-{back}_model.r",
  output:
    plots="{targetdir}/Generated/{topic}/callpeak/p65_{fore}-vs-{back}_model.pdf",
  log:
    "{targetdir}/Logs/{topic}/callpeak/p65_{fore}-vs-{back}_model.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/callpeak/p65_{fore}-vs-{back}_model.benchmark"
  conda:
    "env_chipseq.yaml"
  threads:
    1
  shell:
    "pwd=`pwd` 2> {log}"
    " && cd `dirname {output}` 2>> $pwd/{log} && cat `basename {input}` | R --vanilla 2>> $pwd/{log}"

rule chipseq_intersect_replicates:
  input:
    rep1="{targetdir}/Generated/{topic}/callpeak/p65_{fore}_1-vs-{fore}_peaks.narrowPeak",
    rep2="{targetdir}/Generated/{topic}/callpeak/p65_{fore}_2-vs-{fore}_peaks.narrowPeak",
  output:
    "{targetdir}/Generated/{topic}/peakinspection/p65_{fore}_intersect.narrowPeak",
  log:
    "{targetdir}/Logs/{topic}/peakinspection/p65_{fore}_intersect.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/peakinspection/p65_{fore}_intersect.benchmark"
  conda:
    "env_chipseq.yaml"
  threads:
    1
  shell:
    "bedtools intersect -a {input.rep1} -b {input.rep2} -f 0.5 -r > {output} 2> {log}"

rule chipseq_intersect_shared:
  input:
    fore="{targetdir}/Generated/{topic}/peakinspection/p65_{fore}_intersect.narrowPeak",
    back="{targetdir}/Generated/{topic}/peakinspection/p65_{back}_intersect.narrowPeak",
  output:
    "{targetdir}/Generated/{topic}/peakinspection/p65_{fore}_{back}shared.narrowPeak",
  log:
    "{targetdir}/Logs/{topic}/peakinspection/p65_{fore}_{back}shared.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/peakinspection/p65_{fore}_{back}shared.benchmark"
  conda:
    "env_chipseq.yaml"
  threads:
    1
  shell:
    "bedtools intersect -a {input.fore} -b {input.back} -f 0.5 -r > {output} 2> {log}"

rule chipseq_consensus_peaks:
  input:
    fore="{targetdir}/Generated/{topic}/peakinspection/p65_{fore}_intersect.narrowPeak",
    back="{targetdir}/Generated/{topic}/peakinspection/p65_{back}_intersect.narrowPeak",
  output:
    "{targetdir}/Generated/{topic}/peakinspection/p65_{fore}_{back}_consensus.bed",
  log:
    "{targetdir}/Logs/{topic}/peakinspection/p65_{fore}_{back}_consensus.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/peakinspection/p65_{fore}_{back}_consensus.benchmark"
  conda:
    "env_chipseq.yaml"
  threads:
    1
  shell:
    "cat {input.fore} {input.back} | bedtools sort | bedtools merge > {output} 2> {log}"

rule chipseq_corrPlot:
  input:
    tnf1="{targetdir}/Generated/{topic}/p65_ChIP-seq_{fore}_1_hisat2_unspliced.sorted.bam",
    tnf2="{targetdir}/Generated/{topic}/p65_ChIP-seq_{fore}_2_hisat2_unspliced.sorted.bam",
    vehicle1="{targetdir}/Generated/{topic}/p65_ChIP-seq_{back}_1_hisat2_unspliced.sorted.bam",
    vehicle2="{targetdir}/Generated/{topic}/p65_ChIP-seq_{back}_2_hisat2_unspliced.sorted.bam",
    consensus="{targetdir}/Generated/{topic}/peakinspection/p65_{fore}_{back}_consensus.bed"
  output:
    data="{targetdir}/Generated/{topic}/correlationplot/p65_{fore}_{back}_correlationPlot.npz",
    graph="{targetdir}/Generated/{topic}/correlationplot/p65_{fore}_{back}_correlationPlot.pdf",
    matrix="{targetdir}/Generated/{topic}/correlationplot/p65_{fore}_{back}_correlationPlot.txt",
  log:
    "{targetdir}/Logs/{topic}/correlationplot/p65_{fore}_{back}_correlationPlot.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/correlationplot/p65_{fore}_{back}_correlationPlot.benchmark"
  conda:
    "env_chipseq.yaml"
  resources:
    ntasks="4",
  shell:
    "multiBamSummary BED-file --BED {input.consensus} --bamfiles {input.tnf1} {input.tnf2} {input.vehicle1} {input.vehicle2} --outFileName {output.data} -p {resources.ntasks} --labels {wildcards.fore}1 {wildcards.fore}2 {wildcards.back}1 {wildcards.back}2 2> {log}"
    " && plotCorrelation --corData {output.data} --plotFile {output.graph} --outFileCorMatrix {output.matrix} --whatToPlot heatmap --corMethod pearson --plotNumbers --removeOutliers 2>> {log}"

rule chipseq_intersect_top:
  input:
    "{targetdir}/Generated/{topic}/peakinspection/p65_{fore}_intersect.narrowPeak",
  output:
    "{targetdir}/Generated/{topic}/homer/p65_{fore}-top{number}_intersect.narrowPeak",
  log:
    "{targetdir}/Logs/{topic}/homer/p65_{fore}-top{number}_intersect.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/homer/p65_{fore}-top{number}_intersect.benchmark"
  threads:
    1
  shell:
    "cat {input} | sort -k 7,7nr | head -n {wildcards.number} > {output} 2>> {log} || true"  # I am kind of desparate, since I don't understand why this pipe fails. Results are present and correct?!

rule chipseq_prepareHomer:
  output:
    directory("{targetdir}/Generated/{topic}/homer/data"),
  log:
    "{targetdir}/Logs/{topic}/homer/prepare.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/homer/prepare.benchmark"
  threads:
    1
  conda:
    "env_chipseq.yaml"
  params:
    proxy=lambda wildcards: config['proxy'],
  shell:
    "if [ \"{params.proxy}\" != \"\" ]; then export http_proxy={params.proxy} 2> {log}"
    " && export https_proxy={params.proxy} 2>> {log}"
    " && export ftp_proxy={params.proxy} 2>> {log}; fi"
    " && perl $CONDA_PREFIX/share/homer/configureHomer.pl -install hg19 2>> {log}"
    " && cp -r -v $CONDA_PREFIX/share/homer/data {output} 2>> {log}"

rule chipseq_homer:
  input:
    data="{targetdir}/Generated/{topic}/homer/data",
    peaks="{targetdir}/Generated/{topic}/homer/p65_{fore}-top{number}_intersect.narrowPeak"
  output:
    directory("{targetdir}/Generated/{topic}/homer/p65_{fore}-top{number}.homer")
  log:
    "{targetdir}/Logs/{topic}/homer/findMotifsGenome-{fore}-top{number}.log"
  benchmark:
    "{targetdir}/Benchmarks/{topic}/homer/findMotifsGenome-{fore}-top{number}.benchmark"
  threads:
    1
  conda:
    "env_chipseq.yaml"
  params:
    proxy=lambda wildcards: config['proxy'],
  resources:
    mem_mb="2000"
  shell:
    "findMotifsGenome.pl {input.peaks} hg19 {output} -mask 2>> {log}"


cmps = ['TNF_1-vs-TNF', 'TNF_2-vs-TNF', 'Vehicle_1-vs-Vehicle', 'Vehicle_2-vs-Vehicle']
rule exec_tests_chipseq:
  input:
    rules.build_image.output,
    ["%s/Generated/ChIPseq/callpeak/p65_%s_peaks.narrowPeak" % (relpath(config['dir_dist']), cmp) for cmp in cmps],
    top500="%s/Generated/ChIPseq/homer/p65_TNF-top500_intersect.narrowPeak" % relpath(config['dir_dist']),
    bam_fore="%s/Generated/ChIPseq/p65_ChIP-seq_TNF_1_hisat2_unspliced.sorted.bam" % relpath(config['dir_dist']),
    bam_fore2="%s/Generated/ChIPseq/p65_ChIP-seq_TNF_2_hisat2_unspliced.sorted.bam" % relpath(config['dir_dist']),
    bam_back="%s/Generated/ChIPseq/p65_Input_TNF_hisat2_unspliced.sorted.bam" % relpath(config['dir_dist']),
    script='ChIPseq/chipseq.tests.make',
    consensus="%s/Generated/ChIPseq/peakinspection/p65_TNF_Vehicle_consensus.bed" % relpath(config['dir_dist']),
  output:
    "%s/Testres/chipseq.txt" % relpath(config['dir_dist'])
  log:
    "%s/Logs/container_tests/chipseq.log" % relpath(config['dir_dist'])
  benchmark:
    "%s/Benchmarks/container_tests/chipseq.benchmark" % relpath(config['dir_dist'])
  params:
    proxy=lambda wildcards: config['proxy'],
    mount=join(config['dir_dist'], 'Generated'),
    tag=config['podman']['tagprefix']
  shell:
    'podman run -v ./{input.script}:/home/jovyan/makefile -v {params.mount}:/Data/ -e http_proxy="{params.proxy}" -e https_proxy="{params.proxy}" -e ftp_proxy="{params.proxy}" -t {params.tag} /bin/bash -c "source /opt/conda/etc/profile.d/conda.sh; conda activate chipseq; make" 2> {log} > {output}'
    ' && echo "=====passed=====" >> {output} 2>> {log}'
    ' && date >> {output} 2>> {log}'

rule chipseq:
  input:
    ["%s/Generated/ChIPseq/callpeak/p65_%s_model.pdf" % (relpath(config['dir_dist']), cmp) for cmp in cmps],
    "%s/Generated/ChIPseq/multiQC_report" % relpath(config['dir_dist']),
    rules.exec_tests_chipseq.output,
    "%s/Generated/ChIPseq/correlationplot/p65_TNF_Vehicle_correlationPlot.pdf" % relpath(config['dir_dist']),
    "%s/Generated/ChIPseq/homer/p65_TNF-top500.homer" % relpath(config['dir_dist']),
    "%s/Generated/ChIPseq/homer/p65_Vehicle-top500.homer" % relpath(config['dir_dist']),
